/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Clientes.java
 *
 * 
 */
package PuntoPlast;

import claseconexion.Conectar;
import java.awt.event.KeyEvent;
//import com.sun.glass.events.KeyEvent;
import java.awt.Font;
import java.sql.*;
//import java.util.logging.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrador
 */
public class Clientes extends javax.swing.JFrame {
    public DefaultTableModel modelo;
    final String msj="Cedula o Nombre...";
    
    public Clientes() {
        initComponents();
        Facturacion.clientes=true;
        mostrarclientes("");
        PlaceHolder();
    }
    
    void PlaceHolder(){
        ph.Mensaje(txtbuscar, msj, 0);
    }
    
    void limpiar(){
        txtbuscar.setText("");
    }
    
    public  static void mostrarclientes(String valor){
        DefaultTableModel modelo = (DefaultTableModel) tbclientes.getModel();
        int a =tbclientes.getRowCount()-1;
        int i;
        
        for(i=a;i>=0;i--){
            modelo.removeRow(i);
        }
        
        String []Registros= new String[8];        
        
        try{//Se consulta los usuarios con la cantidad de pedidos
            String consulta="SELECT * FROM cliente a " +
                            "LEFT JOIN (SELECT a.Ci_clie as Ci_clie, count(*) AS Pedidos_pend FROM cliente a JOIN pedido b ON a.Ci_clie=b.Ci_clie WHERE Estado_ped='Procesado' AND Num_fac IS NULL GROUP BY Ci_clie) AS pedidos_pendientes ON a.Ci_clie=pedidos_pendientes.Ci_clie " +
                            "WHERE (a.Ci_clie LIKE '"+valor+"%') OR (CONCAT(Nomb_clie, ' ', Ape_clie) LIKE '"+valor+"%') " +
                            "ORDER BY a.Ci_clie";
                     
            Statement st= cn.createStatement();
            ResultSet rs=st.executeQuery(consulta);                             
                     
            while(rs.next()){ 
                Registros[7]=null;
                 
                Registros[0]=rs.getString("Tipo_ci_clie");
                Registros[1]=rs.getString("Ci_clie");  
                Registros[2]=rs.getString("Nomb_clie");  
                Registros[3]=rs.getString("Ape_clie");  
                Registros[4]=rs.getString("Tipo_clie"); 
                Registros[5]=rs.getString("Tlf_clie"); 
                Registros[6]=rs.getString("Dir_clie");
                Registros[7]=rs.getString("Pedidos_pend"); 
                 
                if(Registros[7]==null){
                    Registros[7]="0";
                }
                 
                modelo.addRow(Registros);
            } 
            tbclientes.setModel(modelo);        
        }catch(SQLException ex){
            System.out.println("Error: "+ex);
            JOptionPane.showMessageDialog(null, "Hubo un error en la consulta SQL.");
        } 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        mnenviar = new javax.swing.JMenuItem();
        mnpedidos = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnmostrar = new javax.swing.JButton();
        txtbuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbclientes = new javax.swing.JTable();
        Btnregistrar = new javax.swing.JButton();

        mnenviar.setText("Enviar Datos");
        mnenviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnenviarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnenviar);

        mnpedidos.setText("Pedidos");
        mnpedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnpedidosActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnpedidos);

        setTitle("CLIENTES");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Buscar por:");

        btnmostrar.setText("Mostrar Todo");
        btnmostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmostrarActionPerformed(evt);
            }
        });

        txtbuscar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtbuscarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtbuscarFocusLost(evt);
            }
        });
        txtbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbuscarActionPerformed(evt);
            }
        });
        txtbuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscarKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscarKeyTyped(evt);
            }
        });

        tbclientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo_CI", "Cédula", "Nombre", "Apellido", "Tipo", "Teléfono", "Dirección", "Pedidos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbclientes.setComponentPopupMenu(jPopupMenu1);
        jScrollPane1.setViewportView(tbclientes);

        Btnregistrar.setText("Registrar Clientes");
        Btnregistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnregistrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(117, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnmostrar)
                .addGap(38, 38, 38)
                .addComponent(Btnregistrar)
                .addGap(25, 25, 25))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnmostrar)
                    .addComponent(Btnregistrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnmostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmostrarActionPerformed
// TODO add your handling code here:
    limpiar();
    mostrarclientes("");
}//GEN-LAST:event_btnmostrarActionPerformed

private void txtbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbuscarActionPerformed
// TODO add your handling code here:
    
}//GEN-LAST:event_txtbuscarActionPerformed

private void txtbuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscarKeyReleased
// TODO add your handling code here:
    mostrarclientes(txtbuscar.getText());
}//GEN-LAST:event_txtbuscarKeyReleased

private void BtnregistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnregistrarActionPerformed
// TODO add your handling code here:
    try {
        IngresoCliente ingcli= new IngresoCliente();
        ingcli.toFront();
        ingcli.setVisible(true);
        this.dispose();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Parece que una ventana tiene problemas...", "Error", JOptionPane.ERROR_MESSAGE);
    }    
}//GEN-LAST:event_BtnregistrarActionPerformed

private void mnenviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnenviarActionPerformed
// TODO add your handling code here:
     
    int fila = tbclientes.getSelectedRow();
    
        if(fila<0){
            JOptionPane.showMessageDialog(null, "No ha seleccionado ningun dato");                  
        }else{
            try{
                String usuario=null, ced=tbclientes.getValueAt(fila, 1).toString();
                String select="SELECT Id_usu FROM cliente "
                            + "WHERE Ci_clie="+ced+"";
        
                Statement st=cn.createStatement();
                ResultSet rs=st.executeQuery(select);
        
                while(rs.next()){
                    usuario=rs.getString("Id_usu");
                }
            
                if(usuario!=null){//Si es un usuario
                    switch(tbclientes.getValueAt(fila, 4).toString()){    
                        case "Natural":
                                try {   
                                    String tipoci="",nom="",ape="",tlf="",dir="";
                                    Font fuente=new Font("Tahoma", Font.PLAIN, 11);
                                
                                    //tipoci = tbclientes.getValueAt(fila, 0).toString();                                    
                                    nom = tbclientes.getValueAt(fila, 2).toString();
                                    ape = tbclientes.getValueAt(fila, 3).toString();
                                    tlf = tbclientes.getValueAt(fila, 5).toString();
                                    dir = tbclientes.getValueAt(fila, 6).toString();
         
                                    Facturacion.txtced.setText(ced);
                                    Facturacion.txtnomape.setText(nom+" "+ape);
                                    Facturacion.txtrif.setText("(Vacio)");
                                    Facturacion.txtrif.setFont(fuente);
                                    
                                    Facturacion.txtempresa.setText("(Vacio)");
                                    
                                    if(dir.equals("")){
                                        Facturacion.txtdir.setText("(Vacio)");
                                    }else{
                                        Facturacion.txtdir.setText(dir);
                                    }
                                    
                                    if(tlf.equals("")){
                                        Facturacion.txttlf.setText("(Vacio)");
                                    }else{
                                        Facturacion.txttlf.setText(tlf);
                                    }
                                    
                                    Facturacion.txtpedi.setText("(Vacio)");
                                             
                                } catch (Exception e) {
                                    System.out.println("Error: "+e);
                                    JOptionPane.showMessageDialog(null, "Error, no se pudo enviar los datos.", "ERROR",JOptionPane.ERROR_MESSAGE);
                                }
                                break;
                            
                        case "Juridico":
                                try {   
                                    String rif="",empresa="";
                                    String select1="SELECT * FROM juridico "                                             
                                                 + "WHERE Ci_clie="+ced+"";
                        
                                    Statement st1=cn.createStatement();
                                    ResultSet rs1=st1.executeQuery(select1);
                        
                                    while(rs1.next()){
                                        rif=rs1.getString("Rif_juri");
                                        empresa=rs1.getString("Empresa_juri");
                                    }
                                
                                    try {   
                                        String tipoci="",nom="",ape="",tlf="",dir="";
                                        Font fuente=new Font("Tahoma",Font.BOLD, 11);
                                
                                        //tipoci = tbclientes.getValueAt(fila, 0).toString();                                        
                                        nom = tbclientes.getValueAt(fila, 2).toString();
                                        ape = tbclientes.getValueAt(fila, 3).toString();
                                        tlf = tbclientes.getValueAt(fila, 5).toString();
                                        dir = tbclientes.getValueAt(fila, 6).toString();
         
                                        Facturacion.txtced.setText(ced);
                                        Facturacion.txtnomape.setText(nom+" "+ape);
                                        Facturacion.txtrif.setText(rif);
                                        Facturacion.txtrif.setFont(fuente);
                                        
                                        Facturacion.txtempresa.setText(empresa);
                                        
                                        if(dir.equals("")){
                                            Facturacion.txtdir.setText("(Vacio)");
                                        }else{
                                            Facturacion.txtdir.setText(dir);
                                        }
                                    
                                        if(tlf.equals("")){
                                            Facturacion.txttlf.setText("(Vacio)");
                                        }else{
                                            Facturacion.txttlf.setText(tlf);
                                        
                                        }
                                        Facturacion.txtpedi.setText("(Vacio)");
                                                 
                                    } catch (Exception e) {
                                        System.out.println(e);
                                        JOptionPane.showMessageDialog(null, "Error, no se pudo enviar los datos.", "ERROR",JOptionPane.ERROR_MESSAGE);
                                    }     
                                } catch (SQLException ex) {
                                    System.out.println(ex);
                                    JOptionPane.showMessageDialog(null, "Hubo un error en la consulta: Juridico.", "ERROR", JOptionPane.ERROR_MESSAGE);
                                }                            
                                break;                            
                    }                    
                }else{//Si es un cliente particular
                    switch(tbclientes.getValueAt(fila, 4).toString()){    
                        case "Natural":
                                try {   
                                    String tipoci="",nom="",ape="",tlf="",dir="";
                                    Font fuente=new Font("Tahoma", Font.PLAIN, 11);
                                
                                    //tipoci = tbclientes.getValueAt(fila, 0).toString();
                                    
                                    nom = tbclientes.getValueAt(fila, 2).toString();
                                    ape = tbclientes.getValueAt(fila, 3).toString();
                                    tlf = tbclientes.getValueAt(fila, 5).toString();
                                    dir = tbclientes.getValueAt(fila, 6).toString();
         
                                    Facturacion.txtced.setText(ced);
                                    Facturacion.txtnomape.setText(nom+" "+ape);
                                    Facturacion.txtrif.setText("(Vacio)");
                                    Facturacion.txtrif.setFont(fuente);
                                    Facturacion.txtempresa.setText("(Vacio)");
                                    
                                    if(dir.equals("")){
                                        Facturacion.txtdir.setText("(Vacio)");
                                    }else{
                                        Facturacion.txtdir.setText(dir);
                                    }
                                    
                                    if(tlf.equals("")){
                                        Facturacion.txttlf.setText("(Vacio)");
                                    }else{
                                        Facturacion.txttlf.setText(tlf);
                                    }
                                    
                                    Facturacion.txtpedi.setText("(Vacio)");
                                             
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Error, no se pudo enviar los datos.", "ERROR",JOptionPane.ERROR_MESSAGE);
                                }
                                break;
                            
                        case "Juridico":
                                try {   
                                    String rif="",empresa="";
                                    String select1="SELECT * FROM juridico "                                             
                                             + "WHERE Ci_clie="+ced+"";
                        
                                    Statement st1=cn.createStatement();
                                    ResultSet rs1=st1.executeQuery(select1);
                        
                                    while(rs1.next()){
                                        rif=rs1.getString("Rif_juri");
                                        empresa=rs1.getString("Empresa_juri");
                                    }
                                
                                    try {   
                                        String tipoci="",nom="",ape="",tlf="",dir="";
                                        Font fuente=new Font("Tahoma", Font.BOLD, 11);
                                
                                        //tipoci = tbclientes.getValueAt(fila, 0).toString();                                        
                                        nom = tbclientes.getValueAt(fila, 2).toString();
                                        ape = tbclientes.getValueAt(fila, 3).toString();
                                        tlf = tbclientes.getValueAt(fila, 5).toString();
                                        dir = tbclientes.getValueAt(fila, 6).toString();
         
                                        Facturacion.txtced.setText(ced);
                                        Facturacion.txtnomape.setText(nom+" "+ape);
                                        Facturacion.txtrif.setText(rif);
                                        Facturacion.txtrif.setFont(fuente);
                                        
                                        Facturacion.txtempresa.setText(empresa);
                                        
                                        if(dir.equals("")){
                                            Facturacion.txtdir.setText("(Vacio)");
                                        }else{
                                        Facturacion.txtdir.setText(dir);
                                        }
                                    
                                        if(tlf.equals("")){
                                            Facturacion.txttlf.setText("(Vacio)");
                                        }else{
                                            Facturacion.txttlf.setText(tlf);
                                        }
                                        
                                        Facturacion.txtpedi.setText("(Vacio)");                                        
         
                                    } catch (Exception e) {
                                        System.out.println(e);
                                        JOptionPane.showMessageDialog(null, "Error, no se pudo enviar los datos.", "ERROR",JOptionPane.ERROR_MESSAGE);
                                    }     
                                } catch (SQLException ex) {
                                    System.out.println(ex);
                                    JOptionPane.showMessageDialog(null, "Hubo un error en la consulta: Juridico.", "ERROR", JOptionPane.ERROR_MESSAGE);
                                }                            
                                break;                            
                    }    
                }//Fin else
            
            }catch(SQLException ex){
                System.out.println(ex);
                JOptionPane.showMessageDialog(null, "Hubo un error en la consulta: Cliente-Usuario.");
            }          
        }
}//GEN-LAST:event_mnenviarActionPerformed

    private void mnpedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnpedidosActionPerformed
        // TODO add your handling code here:
        int fila = tbclientes.getSelectedRow();
        
    
        if(fila<0){
            JOptionPane.showMessageDialog(null, "No ha seleccionado ningun dato");                  
        }else{           
            String ced = tbclientes.getValueAt(fila, 1).toString(), tipo=tbclientes.getValueAt(fila, 4).toString();    
            try{
                int pedido=0;
                String select="SELECT count(*) AS Cant_pedi FROM pedido "
                            + "WHERE Ci_clie="+ced+"";
                
                Statement st=cn.createStatement();
                ResultSet rs=st.executeQuery(select);
                
                while(rs.next()){
                    pedido=rs.getInt("Cant_pedi");
                }
                                
                if(pedido>0){//Si el cliente ha realizado pedidos
                    
                    try{                        
                        int cant_pedi=0;
                        String select1="SELECT count(*) AS Cant_ped_no_fact FROM pedido " +                                       
                                       "WHERE (Num_fac IS NULL) AND ((Estado_ped='Procesado') AND Ci_clie="+ced+")";
                
                        Statement st1=cn.createStatement();
                        ResultSet rs1=st1.executeQuery(select1);
                
                        while(rs1.next()){
                            cant_pedi=rs1.getInt("Cant_ped_no_fact");
                        }                
                    
                        if(cant_pedi>0){//Si el cliente tiene pedidos procesados y no facturados
                            
                            Pedidos p=new Pedidos(ced, tipo, fila);
                            p.setVisible(true);
                            p.toFront();                            
                            
                        }else{
                            JOptionPane.showMessageDialog(null, "Lo sentimos, el cliente no tiene pedidos pendientes por facturar.");    
                        }
                    
                    }catch(SQLException ex){
                        System.out.println("Error: "+ex);
                        JOptionPane.showMessageDialog(null, "Error: No se pudo contar los pedidos del cliente.", "ERROR", JOptionPane.ERROR_MESSAGE);    
                    }
                }else{//Si el cliente no ha realizado pedidos
                    JOptionPane.showMessageDialog(null, "Operacion cancelada: Este cliente no ha realizado pedidos.");
                }
                
            }catch(SQLException ex){
                System.out.println("Error: "+ex);
                JOptionPane.showMessageDialog(null, "Error", "Error: No se pudo verificar la existencias de pedidos.", JOptionPane.ERROR_MESSAGE);
            }        
        }
    }//GEN-LAST:event_mnpedidosActionPerformed

    private void txtbuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscarKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        
        if((c<'a'||c>'z')&&(c<'A'||c>'Z')&&(c<'0'||c>'9')&&(c!=java.awt.event.KeyEvent.VK_BACK_SPACE)&&(c!=java.awt.event.KeyEvent.VK_SPACE)){
            evt.consume();
            this.getToolkit().beep();
        }
    }//GEN-LAST:event_txtbuscarKeyTyped

    private void txtbuscarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtbuscarFocusGained
        // TODO add your handling code here:
        ph.Comparar(txtbuscar);
    }//GEN-LAST:event_txtbuscarFocusGained

    private void txtbuscarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtbuscarFocusLost
        // TODO add your handling code here:
        if(txtbuscar.getText().trim().length()==0){
            PlaceHolder();
        }
    }//GEN-LAST:event_txtbuscarFocusLost

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        Facturacion.clientes=false;
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btnregistrar;
    private javax.swing.JButton btnmostrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnenviar;
    private javax.swing.JMenuItem mnpedidos;
    public static javax.swing.JTable tbclientes;
    private javax.swing.JTextField txtbuscar;
    // End of variables declaration//GEN-END:variables
    static Conectar cc= new Conectar();
    static Connection cn = cc.conexion();
    PlaceHolder ph=new PlaceHolder();
}
