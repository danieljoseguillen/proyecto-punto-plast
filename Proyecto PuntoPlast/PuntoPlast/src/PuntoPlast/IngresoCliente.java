/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IngresoCliente.java
 *
 *
 */
package PuntoPlast;

import claseconexion.Conectar;
//import java.awt.Color;
//import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.util.logging.*;
//import java.util.regex.Matcher;
//import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
//import PuntoPlast.PlaceHolder;

/**
 *
 * @author Administrador
 */
public class IngresoCliente extends javax.swing.JFrame {
    DefaultTableModel model;
    final String msj="Cedula o Nombre...";

    public IngresoCliente() {
        initComponents();        
        PlaceHolder();
        iniciar();
        cargar("");
        String tipo=log.tipousu;
        String Invitado="Invitado";
        if(tipo.equals(Invitado)){
            mneliminar.setVisible(false);
        }
        txtced.requestFocus();
    }
    
    void PlaceHolder(){
        ph.Mensaje(txtbuscar, msj, 0);
    }
    
    //voids para la ventana
    void iniciar(){
        btnguardar.setEnabled(true);
        txtrif.setEnabled(false);
        txtempresa.setEnabled(false);
        cbotipo.setSelectedItem("Natural");
        btnactualizar.setEnabled(false);
        txtced.setEnabled(true);
    }
     
    void limpiar(){
        txtrif.setText("");
        txtempresa.setText("");
        txtced.setText("");
        txtnom.setText("");
        txtdir.setText("");
        txttel.setText("");
        txtape.setText("");    
    }
    
    void iniciarActualizacion(){
        btnguardar.setEnabled(false);
        btnactualizar.setEnabled(true);
        txtced.setEnabled(false);
    }
    
    void cargar(String valor){
        //cargado de datos en la tabla inferior
    String mostrar="SELECT * FROM CLIENTE " +
                   "WHERE (Ci_clie LIKE '"+valor+"%') OR (CONCAT(Nomb_clie, ' ', Ape_clie) LIKE '"+valor+"%')" +
                   "ORDER BY Ci_clie";// Muestra clientes de PHP y JAVA
                   
    DefaultTableModel model = (DefaultTableModel) tbclientes.getModel();
        int a =tbclientes.getRowCount()-1;
        int i;
        for(i=a;i>=0;i--)
        {
            model.removeRow(i);
        }
        String []registros=new String[8];
  
        try {
              Statement st = cn.createStatement();
              ResultSet rs = st.executeQuery(mostrar);
              while(rs.next())
              {
                registros[0]=rs.getString("Tipo_ci_clie");
                registros[1]=rs.getString("Ci_clie"); //Nombre de los campos de la BD
                registros[2]=rs.getString("Nomb_clie");                
                registros[3]=rs.getString("Ape_clie"); 
                registros[4]=rs.getString("Tipo_clie"); 
                registros[5]=rs.getString("Tlf_clie"); 
                registros[6]=rs.getString("Dir_clie");                
                model.addRow(registros); 
              }              
              tbclientes.setModel(model);
              
        } catch (SQLException ex) {
            Logger.getLogger(IngresoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        mnmodificar = new javax.swing.JMenuItem();
        mneliminar = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtced = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtnom = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtape = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbotipo = new javax.swing.JComboBox();
        txttel = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtdir = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtrif = new javax.swing.JTextField();
        txtempresa = new javax.swing.JTextField();
        cbotipoci = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btnguardar = new javax.swing.JButton();
        btnactualizar = new javax.swing.JButton();
        btncancelar = new javax.swing.JButton();
        btnsalir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbclientes = new javax.swing.JTable();
        txtbuscar = new javax.swing.JTextField();
        btnbuscar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        mnmodificar.setText("Modificar");
        mnmodificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnmodificarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnmodificar);

        mneliminar.setText("Eliminar");
        mneliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mneliminarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mneliminar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("REGISTRO DE CLIENTES");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalle Cliente"));

        jLabel1.setText("Cedula:");

        txtced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcedActionPerformed(evt);
            }
        });
        txtced.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcedKeyTyped(evt);
            }
        });

        jLabel2.setText("Nombres:");

        txtnom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnomActionPerformed(evt);
            }
        });
        txtnom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtnomKeyTyped(evt);
            }
        });

        jLabel3.setText("Apellidos:");

        txtape.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtape.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtapeKeyTyped(evt);
            }
        });

        jLabel5.setText("Tipo:");

        cbotipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Natural", "Juridico" }));
        cbotipo.setToolTipText("");
        cbotipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbotipoActionPerformed(evt);
            }
        });

        txttel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txttelKeyTyped(evt);
            }
        });

        jLabel6.setText("Telefono:");

        jLabel8.setText("Direccion:");

        jLabel4.setText("Rif:");

        jLabel9.setText("Empresa:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 102, 102));

        txtrif.setToolTipText("");
        txtrif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtrifActionPerformed(evt);
            }
        });
        txtrif.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtrifKeyTyped(evt);
            }
        });

        txtempresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtempresaActionPerformed(evt);
            }
        });

        cbotipoci.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "V", "E" }));
        cbotipoci.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtdir, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtced, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbotipoci, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txttel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtnom, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtape, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtempresa, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbotipo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtrif, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(73, 73, 73))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbotipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(txtced, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbotipoci, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtrif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtnom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(txtempresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txttel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtdir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(28, 28, 28))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnguardar.setText("Guardar");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });

        btnactualizar.setText("Actualizar");
        btnactualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactualizarActionPerformed(evt);
            }
        });

        btncancelar.setText("Cancelar");
        btncancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelarActionPerformed(evt);
            }
        });

        btnsalir.setText("Salir");
        btnsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnguardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnsalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btncancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnactualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnguardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnactualizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btncancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(btnsalir)
                .addContainerGap())
        );

        tbclientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo_CI", "Cédula", "Nombre", "Apellido", "Tipo_Clie.", "Teléfono", "Dirección"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbclientes.setComponentPopupMenu(jPopupMenu1);
        jScrollPane2.setViewportView(tbclientes);

        txtbuscar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtbuscarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtbuscarFocusLost(evt);
            }
        });
        txtbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbuscarActionPerformed(evt);
            }
        });
        txtbuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscarKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscarKeyTyped(evt);
            }
        });

        btnbuscar.setText("Mostrar Todos");
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });

        jLabel10.setText("Buscar por:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnbuscar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnbuscar)
                    .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnactualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactualizarActionPerformed
// TODO add your handling code here:
    //actualizacion de datos de clientes en base a la cedula
        
    switch(cbotipo.getSelectedItem().toString()){
        case "Natural":{
                        if((txtced.getText().trim().length()==0)||(txtnom.getText().trim().length()==0)||(txtape.getText().trim().length()==0)){
                            JOptionPane.showMessageDialog(this,"Por favor, llene los campos CI, Nombre y Apellido.");
                        }else{
                            if((txttel.getText().length()==12)||(txttel.getText().trim().length()==0)){//Si tiene 12 carateres o ninguno                  
                                String ced,tipoci,dir,nom,ape,tel,tipo;
                                String update;
                                tipoci=(String) cbotipoci.getSelectedItem();
                                ced=txtced.getText();
                                nom=txtnom.getText();
                                ape=txtape.getText();
                                dir=txtdir.getText();
                                tel=txttel.getText();
                                tipo=cbotipo.getSelectedItem().toString();               
                                            
                                update="UPDATE cliente SET Tipo_ci_clie='"+tipoci+
                                       "',Nomb_clie='"+nom+
                                       "',Ape_clie='"+ape+
                                       "',Tipo_clie='"+tipo+
                                       "',Dir_clie='"+dir+
                                       "',Tlf_clie='"+tel+ 
                                       "' WHERE Ci_clie='"+ced+"'";                                            
                        
                                       try {
                                            PreparedStatement pst1  = cn.prepareStatement(update);                                              
                                            int n1=pst1.executeUpdate();                     
                        
                                            if(n1>0){
                                                try{
                                                    String update2="DELETE FROM juridico WHERE Ci_clie="+txtced.getText()+"";
                                                
                                                    PreparedStatement pst2  = cn.prepareStatement(update2);                                              
                                                    int n2=pst2.executeUpdate();
                                                
                                                    if(n2>0){
                                                        System.out.println("Borró juridico.");
                                                        JOptionPane.showMessageDialog(this, "Registro actualizado exitosamente.");
                                                        limpiar();
                                                        iniciar();
                                                    }
                                                }catch(SQLException ex){
                                                    System.out.println("Error: "+ex);
                                                    JOptionPane.showMessageDialog(this, "Error: No se pudo borrar los datos juridicos.");
                                                }
                                            }       
                        
                                            cargar("");                                    
                                       } catch (SQLException ex) {
                                            System.out.print(ex.getMessage());
                                            JOptionPane.showMessageDialog(this, "Error al actualizar, operacion cancelada.");
                                       }                                        
                            }else{
                                JOptionPane.showMessageDialog(this,"Error: numero telefonico no valido.");                                
                            }                     
                        }
                        break;   
        }
        
        case "Juridico":{if((txtced.getText().trim().length()==0)||(txtnom.getText().trim().length()==0)||(txtape.getText().trim().length()==0)||(txtrif.getText().trim().length()==0)||(txtrif.getText().equals("Ej: 0000000-0"))||(txtempresa.getText().trim().length()==0)){
                            JOptionPane.showMessageDialog(this,"Por favor, llene los campos CI, Nombre, Apellido, Rif y Empresa.");
                        }else{                                      
                            if((txttel.getText().length()==12)||(txttel.getText().trim().length()==0)){//Si tiene 12 carateres o ninguno                  
                                String tipoci,ced,dir,nom,ape,tel,tipo,rif,empresa;
                                String update1, update2;
                                tipoci=(String) cbotipoci.getSelectedItem();
                                ced=txtced.getText();
                                nom=txtnom.getText();
                                ape=txtape.getText();
                                dir=txtdir.getText();
                                tel=txttel.getText();
                                tipo=cbotipo.getSelectedItem().toString();
                                rif=txtrif.getText();
                                empresa=txtempresa.getText();                                                                
                        
                                update1="UPDATE cliente SET Tipo_ci_clie='"+tipoci+
                                        "',Nomb_clie='"+nom+
                                        "',Ape_clie='"+ape+
                                        "',Tipo_clie='"+tipo+
                                        "',Dir_clie='"+dir+
                                        "',Tlf_clie='"+tel+ 
                                        "' WHERE Ci_clie='"+ced+"'";
                                                                                         
                                        try {
                                            PreparedStatement pst1  = cn.prepareStatement(update1);                                              
                                            int n1=pst1.executeUpdate();                     
                        
                                            if(n1>0){
                                                try{
                                                    String consulta="SELECT * FROM juridico "
                                                                  + "WHERE Ci_clie="+ced+"";
                                                    Statement st=cn.createStatement();
                                                    ResultSet rs=st.executeQuery(consulta);
                                                    
                                                    if(rs.next()){
                                                        try {
                                                            update2="UPDATE juridico SET Rif_juri='"+rif+"', Empresa_juri='"+empresa+"' WHERE Ci_clie='"+ced+"'";
                                                            PreparedStatement pst2  = cn.prepareStatement(update2);                                              
                                                            int n2=pst2.executeUpdate();
                                                    
                                                            if(n2>0){
                                                                JOptionPane.showMessageDialog(this, "Registro actualizado exitosamente.");
                                                                limpiar();
                                                                iniciar();
                                                            }else{
                                                                JOptionPane.showMessageDialog(null, "No se pudo registrar los datos juridicos");
                                                            }
                                                        }catch(SQLException ex){
                                                            System.out.print(ex.getMessage());
                                                            JOptionPane.showMessageDialog(this, "Error al actualizar datos juridicos.");
                                                        }
                                                    }else{
                                                        try {
                                                            String insert="INSERT INTO juridico VALUES(?,?,?)";
                                                            PreparedStatement pst2  = cn.prepareStatement(insert);
                                                            pst2.setString(1, ced);
                                                            pst2.setString(2, rif);
                                                            pst2.setString(3, empresa);                                                            
                                                            int n2=pst2.executeUpdate();
                                                    
                                                            if(n2>0){
                                                                JOptionPane.showMessageDialog(this, "Registro actualizado exitosamente.");
                                                                limpiar();
                                                                iniciar();
                                                            }else{
                                                                JOptionPane.showMessageDialog(null, "No se pudo registrar los datos juridicos");
                                                            }
                                                        }catch(SQLException ex){
                                                            System.out.print(ex.getMessage());
                                                            JOptionPane.showMessageDialog(this, "Error al insertar persona juridica.");
                                                        }
                                                    }                                               
                                                }catch(SQLException ex){
                                                    JOptionPane.showMessageDialog(this, "Error en la consulta sobre la existencia de persona juridica.");
                                                }                                        
                                            }       
                        
                                            cargar("");                                    
                                        } catch (SQLException ex) {
                                            System.out.print(ex.getMessage());
                                            JOptionPane.showMessageDialog(this, "Error al actualizar, operacion cancelada.");
                                        }                                        
                                    }else{
                                        System.out.println(txttel.getText().length()+" carateres.");
                                        JOptionPane.showMessageDialog(this,"Error: numero telefonico no valido.");                                
                                    }
                        }
                        break;
        }           
    }    
}//GEN-LAST:event_btnactualizarActionPerformed

private void btnsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsalirActionPerformed
// TODO add your handling code here:
    this.dispose();
}//GEN-LAST:event_btnsalirActionPerformed

private void btncancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelarActionPerformed
// TODO add your handling code here:    
    limpiar();
    iniciar();
}//GEN-LAST:event_btncancelarActionPerformed

private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
// TODO add your handling code here:
    //guardado en base de datoscon texto de textfields
    
    switch(cbotipo.getSelectedItem().toString()){
        //Si es natural       
        case "Natural":{if((txtced.getText().trim().length()==0)||(txtnom.getText().trim().length()==0)||(txtape.getText().trim().length()==0)){
                            JOptionPane.showMessageDialog(this,"Por favor, llene los campos CI, Nombre y Apellido");
                        }else{                    
                            try{
                                String cedu=txtced.getText();
                                String cedbuscada="";
                                String select="SELECT * FROM cliente " +
                                              "WHERE Ci_clie="+cedu+"";// Busca la cedula ingresada
                                
                                Statement st=cn.createStatement();
                                ResultSet rs=st.executeQuery(select);
                                
                                while(rs.next()){                       
                                    cedbuscada=rs.getString("Ci_clie");
                                }                                
                            
                                if(!cedu.equals(cedbuscada)){//Si la cedula ingresada no existe, la guarda.                                    
                                        if((txttel.getText().length()==12)||(txttel.getText().trim().length()==0)){//Si tiene 12 carateres o ninguno                  
                                            String tipoci,ced,dir,nom,ape,tel,tipo;
                                            String sql;
                                            tipoci=(String) cbotipoci.getSelectedItem();
                                            ced=txtced.getText();
                                            nom=txtnom.getText();
                                            ape=txtape.getText();
                                            dir=txtdir.getText();
                                            tel=txttel.getText();
                                            tipo=cbotipo.getSelectedItem().toString();
                                            
                                            if(tel.trim().length()==0){
                                                tel="(Vacio)";
                                            }
                                            
                                            if(dir.trim().length()==0){
                                                dir="(Vacio)";
                                            }                        
                                                           
                                            sql="INSERT INTO cliente(Ci_clie, Tipo_ci_clie, Nomb_clie, Ape_clie, Tipo_clie, Tlf_clie, Dir_clie) VALUES (?,?,?,?,?,?,?)";
                        
                                            try {
                                                PreparedStatement pst1  = cn.prepareStatement(sql);
                                                pst1.setString(1, ced);
                                                pst1.setString(2, tipoci);
                                                pst1.setString(3, nom);
                                                pst1.setString(4, ape);
                                                pst1.setString(5, tipo);
                                                pst1.setString(6, tel);
                                                pst1.setString(7, dir);
                                                int n1=pst1.executeUpdate();                     
                        
                                                if(n1>0){                                                    
                                                        JOptionPane.showMessageDialog(this, "Registro Guardado con Exito.");
                                                        limpiar();
                                                        iniciar();                                                        
                                                }       
                        
                                                cargar("");                                    
                                            } catch (SQLException ex) {
                                                System.out.print(ex.getMessage());
                                                JOptionPane.showMessageDialog(this, "Error al guardar, operacion cancelada.");
                                            }                                        
                                        }else{
                                            JOptionPane.showMessageDialog(this,"Error: numero telefonico no valido.");                                
                                        }                                   
                                }else{
                                    JOptionPane.showMessageDialog(this,"Operacion cancelada: la cedula ya existe.");
                                }
                            
                            }catch(SQLException ex){
                                JOptionPane.showMessageDialog(this,"Error al comprobar cedula.");
                            }
                        }
                        break;       
                        }
        //Si es juridico
        case "Juridico":{if((txtced.getText().trim().length()==0)||(txtnom.getText().trim().length()==0)||(txtape.getText().trim().length()==0)||(txtrif.getText().trim().length()==0)||(txtempresa.getText().trim().length()==0)){
                            JOptionPane.showMessageDialog(this,"Por favor, llene los campos CI, Nombre, Apellido, RIF y Empresa");
                         }else{
                            
                            String cedu=txtced.getText();
                            String cedbuscada="";
                            String select="SELECT * FROM cliente " +
                                          "WHERE Ci_clie="+cedu+"";// Muestra todos los cliente
                            
                            try{
                                Statement st=cn.createStatement();
                                ResultSet rs=st.executeQuery(select);
                                
                                while(rs.next()){
                                    cedbuscada=rs.getString("Ci_clie");                   
                                }
                                
                                if(!cedu.equals(cedbuscada)){//Si la cedula ingresada no existe, la guarda.                              
                                        if((txttel.getText().length()==12)||(txttel.getText().trim().length()==0)){//Si tiene 12 carateres o ninguno 
                                    
                                            String tipoci,ced,dir,nom,ape,tel,tipo,rif,empresa;
                                            String sql1, sql2;
                                            tipoci=(String) cbotipoci.getSelectedItem();
                                            ced=txtced.getText();
                                            nom=txtnom.getText();
                                            ape=txtape.getText();
                                            dir=txtdir.getText();
                                            tel=txttel.getText();
                                            tipo=cbotipo.getSelectedItem().toString();                                    
                                            rif=txtrif.getText();
                                            empresa=txtempresa.getText();
                                            
                                            if(tel.trim().length()==0){
                                                tel="(Vacio)";
                                            }
                                            
                                            if(dir.trim().length()==0){
                                                dir="(Vacio)";
                                            }                        
                                               
                                            sql1="INSERT INTO cliente(Ci_clie, Tipo_ci_clie, Nomb_clie, Ape_clie, Tipo_clie, Tlf_clie, Dir_clie) VALUES (?,?,?,?,?,?,?)";
                                            sql2="INSERT INTO juridico VALUES (?,?,?)";
                                
                                            try {
                                                PreparedStatement pst1  = cn.prepareStatement(sql1);
                                                pst1.setString(1, ced);
                                                pst1.setString(2, tipoci);
                                                pst1.setString(3, nom);
                                                pst1.setString(4, ape);
                                                pst1.setString(5, tipo);
                                                pst1.setString(6, tel);
                                                pst1.setString(7, dir);
                                                int n1=pst1.executeUpdate();                           
                                                    
                                                if(n1>0){
                                
                                                    try {                                
                                                        PreparedStatement pst2 = cn.prepareStatement(sql2);
                                                        pst2.setString(1, ced);
                                                        pst2.setString(2, rif);
                                                        pst2.setString(3, empresa);
                                                        int n2=pst2.executeUpdate();
                                
                                                        if(n2>0){                            
                                                            JOptionPane.showMessageDialog(this, "Registro Guardado con Exito");
                                                            limpiar();
                                                            iniciar();
                                                        }
                                                    }catch(SQLException ex){
                                                        System.out.print(ex.getMessage());
                                                        JOptionPane.showMessageDialog(this, "Error al guardar, operacion cancelada");
                                                    }
                                                }                       
                                                cargar("");
                                            } catch (SQLException ex) {
                                                System.out.print(ex.getMessage());
                                                JOptionPane.showMessageDialog(this, "Error al guardar, operacion cancelada");
                                            }                        
                                        }else{
                                            JOptionPane.showMessageDialog(this,"Error: numero telefonico no valido");                            
                                        }                           
                                }else{
                                    JOptionPane.showMessageDialog(this,"Operacion cancelada: La cedula ya existe.");
                                }
                            }catch(SQLException ex){
                                JOptionPane.showMessageDialog(this,"Error al comprobar la cedula.");
                            }
                        }    
                        break;
                        }
    }    
}//GEN-LAST:event_btnguardarActionPerformed

private void txtbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbuscarActionPerformed
// TODO add your handling code here:    
}//GEN-LAST:event_txtbuscarActionPerformed

private void mneliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mneliminarActionPerformed
// TODO add your handling code here:
    int fila= tbclientes.getSelectedRow();
    
    if(fila>=0){//Si la fila es seleccionada
    
        try {//Se corrobora si el cliente es usuario o no
            String ced;    
            ced=tbclientes.getValueAt(fila, 1).toString();
            String select="SELECT Id_usu FROM CLIENTE " +
                          "WHERE Ci_clie="+ced+"";
            
            Statement st=cn.createStatement();
            ResultSet rs=st.executeQuery(select);
            String usuario=null;
            
            while(rs.next()){
                usuario=rs.getString("Id_usu");
            }
            
            if(usuario==null){//Si no es un usuario (cliente particular), lo borra        
                String compra="";
                String selectcompra="SELECT * FROM factura WHERE Ci_clie="+ced+"";//Muestra los clientes que han comprado
                    
                try{                    
                    Statement st1=cn.createStatement();
                    ResultSet rs1=st1.executeQuery(selectcompra);
                    
                    while(rs1.next()){
                        compra=rs1.getString("Num_fac");
                    }
                        
                    if(compra.equals("")){//Si no ha hecho una compra: borra solo el cliente
                        //Ventana de confirmacion
                        int resp=JOptionPane.showConfirmDialog(this, "¿Desea borrar este cliente?");
                
                        if(resp==JOptionPane.YES_OPTION){//Si se confirma la eliminacion
                            try{
                            PreparedStatement pst = cn.prepareStatement("DELETE FROM cliente WHERE Ci_clie='"+ced+"'");
                            int n= pst.executeUpdate(); 
            
                            if(n > 0){
                                JOptionPane.showMessageDialog(null, "Registro Borrado exitosamente.");
                                limpiar();
                                iniciar();
                            }
                            
                            cargar("");
                            }catch(SQLException ex){
                                JOptionPane.showMessageDialog(null, "Error al Borrar el Registro, Operacion Cancelada.");
                            }
                        }                   
                    }else{//Si ha comprado
                        JOptionPane.showMessageDialog(null, "Operacion cancelada: No se puede borrar un cliente facturado.");
                    }
                }catch(SQLException ex){//Si hay error en la consulta con cliente y factura
                    JOptionPane.showMessageDialog(this, "Operacion cancelada: Error en la consulta con cliente y factura.");
                    Logger.getLogger(IngresoCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                    
            }else{//Si es un usuario
                JOptionPane.showMessageDialog(this, "Lo sentimos, no se puede borrar un usuario de la pagina web.");
            }    
        } catch (SQLException ex) {//Si hay error con cliente y usuario
            JOptionPane.showMessageDialog(this, "Operacion cancelada: Error al comprobar si el cliente es usuario.");
            Logger.getLogger(IngresoCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }else{//Si no se selecciona una fila
        JOptionPane.showMessageDialog(this, "No ha selecionado ninguna fila.");
    }        
}//GEN-LAST:event_mneliminarActionPerformed

private void mnmodificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnmodificarActionPerformed
// TODO add your handling code here:
    iniciarActualizacion();
    
    int filamodificar= tbclientes.getSelectedRow();
    
    if(filamodificar>=0){//Si se selecciona una fila
        switch(tbclientes.getValueAt(filamodificar, 4).toString()){
            
            case "Natural":{//Si la fila es natural
                limpiar();                
                cbotipoci.setSelectedItem(tbclientes.getValueAt(filamodificar, 0).toString());
                txtced.setText(tbclientes.getValueAt(filamodificar, 1).toString());
                txtnom.setText(tbclientes.getValueAt(filamodificar, 2).toString());
                txtape.setText(tbclientes.getValueAt(filamodificar, 3).toString());
                cbotipo.setSelectedItem(tbclientes.getValueAt(filamodificar, 4).toString());
                txttel.setText(tbclientes.getValueAt(filamodificar, 5).toString());
                txtdir.setText(tbclientes.getValueAt(filamodificar, 6).toString()); 
                break;
            }
        
            case "Juridico":{//Si la fila es juridico
                limpiar();
                cbotipoci.setSelectedItem(tbclientes.getValueAt(filamodificar, 0).toString());
                txtced.setText(tbclientes.getValueAt(filamodificar, 1).toString());
                txtnom.setText(tbclientes.getValueAt(filamodificar, 2).toString());
                txtape.setText(tbclientes.getValueAt(filamodificar, 3).toString());
                cbotipo.setSelectedItem(tbclientes.getValueAt(filamodificar, 4).toString());
                txttel.setText(tbclientes.getValueAt(filamodificar, 5).toString());
                txtdir.setText(tbclientes.getValueAt(filamodificar, 6).toString());
            
                try {
                    String [] registros=new String [3];                    
                    
                    String cedu=tbclientes.getValueAt(filamodificar, 1).toString();//Obtener cedula
                    String sql="SELECT b.Ci_clie AS Ci_clie, Rif_juri, Empresa_juri FROM cliente a " +
                               "JOIN juridico b ON a.Ci_clie=b.Ci_clie " +
                               "WHERE b.Ci_clie='"+cedu+"'";
              
                    Statement st = cn.createStatement();
                    ResultSet rs = st.executeQuery(sql);
              
                    while(rs.next())
                    {
                        registros[0]=rs.getString("Rif_juri"); //Nombre de los campos de la BD
                        registros[1]=rs.getString("Empresa_juri");                 
                                    
                    txtrif.setText(registros[0]);
                    txtempresa.setText(registros[1]);
                    }
                    //tbclientes.setModel(model);
                } catch (SQLException ex) {
                    Logger.getLogger(IngresoCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
    }else{
        JOptionPane.showMessageDialog(this,"No ha seleccionado ninguna fila");
    }
}//GEN-LAST:event_mnmodificarActionPerformed

    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed
        // TODO add your handling code here:
        cargar("");
        txtbuscar.setText("");
    }//GEN-LAST:event_btnbuscarActionPerformed

    private void txttelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttelKeyTyped
        //validacion de numeros
        char car = evt.getKeyChar();
        if(((txttel.getText().length()>=12)||(car<'0' || car>'9'))&&(car!=KeyEvent.VK_BACK_SPACE)){
            evt.consume();
            this.getToolkit().beep();
        }
        
        if(!(car==KeyEvent.VK_BACK_SPACE)){//Si no se teclea BACKSPACE
            if(txttel.getText().length()==4){//Si hay 4 digitos
                txttel.setText(txttel.getText()+"-");//Añade el guion
            }
        }
    }//GEN-LAST:event_txttelKeyTyped

    private void cbotipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbotipoActionPerformed
        // TODO add your handling code here:
        switch(cbotipo.getSelectedItem().toString()){
            case "Natural":txtrif.setEnabled(false);
                           txtempresa.setEnabled(false);
                           txtced.requestFocus();
                           break;
            case "Juridico":txtrif.setEnabled(true);
                            txtempresa.setEnabled(true);
                            txtrif.requestFocus();
                            break;
        }
    }//GEN-LAST:event_cbotipoActionPerformed

    private void txtapeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtapeKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if((car<'a' || car>'z') && (car<'A' || car>'Z') && (car!='ñ') && (car!=KeyEvent.VK_SPACE) && (car!=KeyEvent.VK_BACK_SPACE)){
            evt.consume();
            this.getToolkit().beep();
        }
    }//GEN-LAST:event_txtapeKeyTyped

    private void txtnomKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnomKeyTyped
        // TODO add your handling code here:
        //validacion de texto
        char car = evt.getKeyChar();
        if((car<'a' || car>'z') && (car<'A' || car>'Z') && (car!='ñ') && (car!=KeyEvent.VK_SPACE) && (car!=KeyEvent.VK_BACK_SPACE)){
            evt.consume();
            this.getToolkit().beep();
        }
    }//GEN-LAST:event_txtnomKeyTyped

    private void txtnomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnomActionPerformed

    private void txtempresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtempresaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtempresaActionPerformed

    private void txtrifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtrifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtrifActionPerformed

    private void txtcedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcedActionPerformed

    private void txtrifKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtrifKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        
        if((c<'0'||c>'9') && (c!='-') && (c!=KeyEvent.VK_BACK_SPACE)){
            evt.consume();
            this.getToolkit().beep();
        }
    }//GEN-LAST:event_txtrifKeyTyped

    private void txtbuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscarKeyReleased
        // TODO add your handling code here:
        //void con texto agregado        
        cargar(txtbuscar.getText());
    }//GEN-LAST:event_txtbuscarKeyReleased

    private void txtbuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscarKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        
        if((c<'a'||c>'z')&&(c<'A'||c>'Z')&&(c<'0'||c>'9')&&(c!=KeyEvent.VK_BACK_SPACE)&&(c!=KeyEvent.VK_SPACE)){
            evt.consume();
            this.getToolkit().beep();
        }
    }//GEN-LAST:event_txtbuscarKeyTyped

    private void txtcedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcedKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        
        if((c<'0'||c>'9')&&(c!=KeyEvent.VK_BACK_SPACE)){
            evt.consume();
            this.getToolkit().beep();
        }
    }//GEN-LAST:event_txtcedKeyTyped

    private void txtbuscarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtbuscarFocusGained
        // TODO add your handling code here:
        ph.Comparar(txtbuscar);
    }//GEN-LAST:event_txtbuscarFocusGained

    private void txtbuscarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtbuscarFocusLost
        // TODO add your handling code here:
        if(txtbuscar.getText().trim().length()==0){
            PlaceHolder();
        }
    }//GEN-LAST:event_txtbuscarFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnactualizar;
    private javax.swing.JButton btnbuscar;
    private javax.swing.JButton btncancelar;
    private javax.swing.JButton btnguardar;
    private javax.swing.JButton btnsalir;
    private javax.swing.JComboBox cbotipo;
    private javax.swing.JComboBox<String> cbotipoci;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem mneliminar;
    private javax.swing.JMenuItem mnmodificar;
    private javax.swing.JTable tbclientes;
    private javax.swing.JTextField txtape;
    private javax.swing.JTextField txtbuscar;
    private javax.swing.JTextField txtced;
    private javax.swing.JTextField txtdir;
    private javax.swing.JTextField txtempresa;
    private javax.swing.JTextField txtnom;
    private javax.swing.JTextField txtrif;
    private javax.swing.JTextField txttel;
    // End of variables declaration//GEN-END:variables
    Conectar cc= new Conectar();
    Connection cn= cc.conexion();
    Login log= new Login();
    PlaceHolder ph=new PlaceHolder();
}
